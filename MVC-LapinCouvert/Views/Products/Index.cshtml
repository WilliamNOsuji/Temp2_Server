@using Models.Models.ViewModels
@model ProductSearchViewModel

@{
    ViewData["Title"] = "Index";
}

@if (!string.IsNullOrEmpty(Model.NoResultsMessage))
{
    <div class="alert alert-warning" role="alert">
        @Model.NoResultsMessage
    </div>
}

<div class="container">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-md-3">
            <div id="sidebar">
                <div class="sidebar-header">
                    <form id="filterForm" asp-action="Filter" method="get">
                        <h3>Trouver un produit dans l'Index</h3>
                        <label asp-for="SearchNameText" class="control-label">Trouver selon le nom de l'item</label>
                        <input asp-for="SearchNameText" class="form-control" />
                        <span asp-validation-for="SearchNameText" class="text-danger"></span>
                        <br />
                        <div class="form-group">
                            <label asp-for="SelectedCategoryId" class="control-label">Catégorie</label>
                            <select asp-for="SelectedCategoryId" asp-items="Model.Categories" class="form-control">
                                <option value="">-- Toutes les catégories --</option>
                            </select>
                            <span asp-validation-for="SelectedCategoryId" class="text-danger"></span>
                        </div>
                        <br />
                        <div class="form-group">
                            <label asp-for="SearchQuantity" class="control-label">Quantité maximale</label>
                            <input asp-for="SearchQuantity" class="form-control" type="number" min="0" />
                            <span asp-validation-for="SearchQuantity" class="text-danger"></span>
                        </div>
                        <br />
                        <div class="form-group">
                            <label asp-for="SearchSellingPrice" class="control-label">Prix de vente maximal</label>
                            <input asp-for="SearchSellingPrice" class="form-control" type="number" step="0.01" min="0" />
                            <span asp-validation-for="SearchSellingPrice" class="text-danger"></span>
                        </div>
                        <br />
                        <label asp-for="SelectedPageSize" class="control-label">Lister selon le nombre d'items</label>
                        <select asp-for="SelectedPageSize" asp-items="Model.AvailablePageSizes" class="form-control">
                            <option selected="selected" value="">10</option>
                        </select>
                        <br />
                        <label asp-for="SelectedPageIndex" hidden="hidden" class="control-label"></label>
                        <input asp-for="SelectedPageIndex" type="hidden" class="form-control" readonly />
                        <br />
                        <div class="form-group form-check">
                            <input asp-for="SearchIsDeleted" class="form-check-input" />
                            <label asp-for="SearchIsDeleted" class="form-check-label">Afficher les produits supprimés</label>
                        </div>
                        <br />
                        <input type="hidden" asp-for="SortBy" />
                        <input type="hidden" asp-for="SortDirection" />
                        <a asp-action="Index" class="btn btn-danger">Rafraichir</a>
                        <button type="submit" class="btn btn-success">Filtrer</button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Main Content (Table) -->
        <div class="col-12 col-md-9">
            
            <p>
                <a asp-action="Create">Créer un nouveau produit</a>
            </p>

            <!-- Table Container -->
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>
                                <a href="#" onclick="sortBy('Name')">Nom</a>
                            </th>
                            <th>
                                <a href="#" onclick="sortBy('Quantity')">Quantité</a>
                            </th>
                            <th>
                                <a href="#" onclick="sortBy('Price')">Prix de vente</a>
                            </th>
                            <th>Nom Catégorie</th>
                            <th>@Html.DisplayNameFor(model => model.PhotoURL)</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.Items)
                        {
                            //if(!item.IsDeleted){
                            <tr>
                                <td>@Html.DisplayFor(modelItem => item.Name)</td>
                                <td>@Html.DisplayFor(modelItem => item.Quantity)</td>
                                <td>@Html.DisplayFor(modelItem => item.SellingPrice)</td>
                                <td>@Html.DisplayFor(modelItem => item.Category.Name)</td>
                                @if(item.Photo != null)
                                {
                                    <td><img style="height:50px; width:auto" src="@item.Photo" alt="@item.Name" /></td>
                                }
                                else
                                {
                                    <td><img style="height:50px; width:auto" src="~/images/default_image.jpg" alt="@item.Name" /></td>
                                }

                                <td>
                                    <a asp-action="Edit" asp-route-id="@item.Id">Modifier</a> |
                                    <a asp-action="Details" asp-route-id="@item.Id">Détails</a> |
                                    <a asp-action="Delete" asp-route-id="@item.Id">Supprimer</a>
                                </td>
                            </tr>
                            //}
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <div id="content-pagination">
                <nav>
                    <ul class="pagination">
                        <!--<li class="page-item @(Model.Items.HasPreviousPage ? "" : "disabled")">
                            <a class="page-link" href="#" data-page-id="previous">Previous</a>
                        </li>-->
                        @for (var i = 1; i <= Model.Items.TotalPages; i++)
                        {
                            <li class="page-item @(i == Model.Items.PageIndex + 1 ? "active" : "")">
                                <a class="page-link" href="#" data-page-id="@i">@i</a>
                            </li>
                        }
                        <!--<li class="page-item @(Model.Items.HasNextPage ? "" : "disabled")">
                            <a class="page-link" href="#" data-page-id="next">Next</a>
                        </li>-->
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const paginationLinks = document.querySelectorAll(".page-link");
            const form = document.getElementById("filterForm");
            const pageIndexInput = document.querySelector("input[name='SelectedPageIndex']");

            paginationLinks.forEach(link => {
                link.addEventListener("click", function (e) {
                    e.preventDefault(); // Prevent default link behavior

                    const pageId = this.getAttribute("data-page-id");
                    let newPageIndex = parseInt(pageIndexInput.value);

                    if (pageId === "previous") {
                        newPageIndex = Math.max(0, newPageIndex - 1);
                    } else if (pageId === "next") {
                        newPageIndex = Math.min(@Model.Items.TotalPages - 1, newPageIndex + 1);
                    } else {
                        newPageIndex = parseInt(pageId) - 1; // Convert to zero-based index
                    }

                    // Update the hidden input value
                    pageIndexInput.value = newPageIndex;

                    // Submit the form
                    form.submit();
                });
            });
        });
    </script>
<script>
    function sortBy(column) {
        const form = document.getElementById("filterForm");
        const sortByInput = document.querySelector("input[name='SortBy']");
        const sortDirectionInput = document.querySelector("input[name='SortDirection']");

        // Get current sort direction
        const currentSortBy = "@Model.SortBy";
        const currentSortDirection = "@Model.SortDirection";

        // Toggle sort direction if the same column is clicked
        if (currentSortBy === column) {
            sortDirectionInput.value = currentSortDirection === "Asc" ? "Desc" : "Asc";
        } else {
            sortDirectionInput.value = "Asc";
        }

        // Update the hidden input values
        sortByInput.value = column;
        sortDirectionInput.value = sortDirectionInput.value;

        // Submit the form
        form.submit();
    }
</script>
